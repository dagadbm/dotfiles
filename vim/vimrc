"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Custom variables
let vimDir = (has('win64')) ? '$HOMEPATH/vimfiles': '$HOME/.vim'
let pluginsDir = expand(vimDir . '/plugins/')
let vimPlugInstalled = isdirectory(pluginsDir)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto vim-plug installation if plugin folder isn't present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Vim-Plug start
call plug#begin()

" ==> Files and Folders Navigation
Plug 'justinmk/vim-dirvish'

" ==> Window and Buffer Management
" Automaticaly resize windows to golden ratio. Used in simpler windows
Plug 'roman/golden-ratio'

" ==> UI
" Light as air status-bar
Plug 'vim-airline/vim-airline'

" ==> Editting
" Surround text with s motion
Plug 'tpope/vim-surround'
" Allow the . command to work on plugin actions (for surround)
Plug 'tpope/vim-repeat'
" Add commentary with gcc for line. g<b and g>b for block
Plug 'tomtom/tcomment_vim'
" Respect editor config file
Plug 'sgur/vim-editorconfig'
" * and # to work on visual mode
Plug 'bronson/vim-visual-star-search'

" ==> LSP
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}

" ==> Syntax
" Syntax pack
Plug 'sheerun/vim-polyglot'
" tmux.conf support
Plug 'tmux-plugins/vim-tmux'

" ==> Autocompletion
Plug 'wellle/tmux-complete.vim'

" ==> Code Navigation
" Vim matchit plugin (makes % match with other tags)
Plug 'vim-scripts/matchit.zip'
" Highlights matching HTML tags
Plug 'gregsexton/MatchTag'
" Make vim current directory the project root
Plug 'airblade/vim-rooter'

" ==> Snippets
" Snippets database
Plug 'honza/vim-snippets'
" Snipmate dependencies
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
" VimL snippet implementation
Plug 'garbas/vim-snipmate'

" ==> Tags
Plug 'ludovicchabant/vim-gutentags'

" ==> External Integrations
" Git
Plug 'tpope/vim-fugitive'
" Tmux
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'christoomey/vim-tmux-navigator'
Plug 'roxma/vim-tmux-clipboard'

" Fzf
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'

" ==> Color Schemes
Plug 'nanotech/jellybeans.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'

" Vim-Plug end
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Open new split panes to right and bottom, which feels more natural than the default
set splitbelow
set splitright

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * :checktime

" Enable filetype plugins
filetype plugin on
filetype indent on

" Allows to hide buffers instead of closing them when files are not saved
set hidden

" Turn backup and swap files off
set nobackup
set nowb
set noswapfile

" Reload when a file is changed from the outside
set autoread

" Tab completion on Vim commands with extra-Tab support
set wildmode=longest,list,full
set wildmenu

" Treat all numbers as decimals
" useful when using <C-a> and <C-x>
set nrformats=

" Fix paste on terminals with tmux (mostly happens on hyper)
" https://vi.stackexchange.com/questions/14491/strange-vim-xterm-interaction-auto-insertion-of-register-when-opening-file
set t_RS=
set t_SH=

" Disabled automatic new line comment (annoying specially when editing vimrc)
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Correct comment highlighting on coc json config file
" https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file
autocmd FileType json syntax match Comment +\/\/.\+$+

" Show tabs and space
:set list
:set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,precedes:«,extends:»

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show current position
set ruler

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Set/ Don't set Highlight search results
"set hlsearch
set nohlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=

" Remove GVIM menus
:set guioptions-=m  "menu bar
:set guioptions-=T  "toolbar
:set guioptions-=r  "right-hand scroll bar
:set guioptions-=L  "left-hand scroll bar

" Always show the status line
:set laststatus=2

" Set extra margin to the left side of the screen
set foldcolumn=0

" Start GVIM maximized on Windows
if(has('win32') || has('win64'))
    autocmd GUIEnter * simalt ~x
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable syntax highlighting
syntax on

" Set background colour
set background=dark

" Define colorscheme
set termguicolors
set t_Co=256
colorscheme onedark

" Define font
if has('gui_running')
    if has('unix')
        set guifont=Monaco:h10
    else
        set guifont=Consolas:h10
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text Editing
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set utf8 as standard encoding
set encoding=utf8

" Use (or not) spaces instead of tabs
" set expandtab
set expandtab!

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Auto indent - next line in same location
set ai

" Word Wrap
set wrap

" Indent wrapped lines
set breakindent

" Set absolute and relative line numbers
set number
set relativenumber

" Use default system clipboard.
set clipboard=unnamed

" Make backspace work like most applications
set backspace=indent,eol,start

" Make ripgrep be the default vimgrep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"<Leader> key avoids default vim key collision
let mapleader = "\<Space>"

" fzf
" https://jesseleite.com/posts/2/its-dangerous-to-vim-alone-take-fzf
nnoremap <Leader>/ :BLines<CR>
nnoremap <Leader>: :History:<CR>
nnoremap <Leader>p :Files<CR>
nnoremap <Leader>f :Rg<CR>
nnoremap <Leader>rg :RgRaw<space>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>h :History<CR>
nnoremap <Leader>H :Helptags<CR>
nnoremap <Leader>t :Tags<CR>
" Type <Leader>* to search everywhere for the selected word on normal and visual mode
nnoremap <silent> <Leader>* :Rg <C-R><C-W><CR>
xnoremap <silent> <Leader>* y:Rg <C-R>"<CR>

" stop it with the annoying macro q and ex mode that I never use (re map it to <Leader> q)
noremap <Leader>q q
noremap q <Nop>
noremap q: <Nop>
noremap Q <Nop>

" Make Enter and Shift-Enter insert lines below and above
" without entering insert mode
nnoremap <CR> o<Esc>k
nnoremap <S-Enter> O<Esc>j

" Space jk for normal mode on visual mode and not on insert mode to avoid
" row selection delay in visual mode
inoremap jk <Esc>
vnoremap <Leader>jk <Esc>

" Traverse only display lines (like normal text editors)
nnoremap j gj
nnoremap k gk

" Make gm go to exact position of any mark
nnoremap gm `

"Make gM go to start of line of any mark
nnoremap gM '

" Make window navigation faster
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Change vim working directory to the current file dir
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" Edit vimrc
nnoremap <Leader>E :edit $MYVIMRC<CR>
" Update vimrc
nnoremap <Leader>R :source $MYVIMRC<CR>

" Go to tag
nnoremap gt <C-]>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Configurations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" coc 
let g:coc_global_extensions = [
\  'coc-webpack',
\  'coc-docker',
\  'coc-sh',
\  'coc-json',
\  'coc-tsserver',
\  'coc-html',
\  'coc-css',
\  'coc-yaml',
\  'coc-vetur',
\  'coc-highlight',
\  'coc-emmet',
\  'coc-svg',
\  'coc-vimlsp',
\  'coc-python',
\  'coc-import-cost',
\  'coc-prettier',
\  'coc-eslint',
\  'coc-stylelint',
\  'coc-lists',
\  'coc-yank',
\  'coc-snippets',
\  'coc-dictionary',
\  'coc-tag',
\  'coc-syntax'
\]

" https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
" use <tab> for trigger completion and navigate to the next complete item
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()


function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <Tab> and <S-Tab> to navigate the completion list:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Close the preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Keybinding

" Remap gotos with coc
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gD <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use <c-e> to trigger snippet expansion
imap <C-e> <Plug>(coc-snippets-expand)

" Cursor support with <C-e>
nmap <silent> <C-e> <Plug>(coc-cursors-word)*
xmap <silent> <C-e> y/\V<C-r>=escape(@",'/\')<CR><CR>gN<Plug>(coc-cursors-range)gn

" Use control+space to trigger completion menu
inoremap <silent><expr> <C-space> coc#refresh()


" ==> Airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_theme='onedark'

" ==> netrw
let g:netrw_liststyle = 3

" ==> fzf related
" fzf actions similar to tmux splits
let g:fzf_action = {
\  'ctrl-t': 'tab split',
\  'ctrl-s': 'split',
\  'ctrl-v': 'vsplit',
\  'enter': 'edit',
\}
" Use fzf with_preview
"Make :Rg not show file name as results
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --hidden --follow --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:60%:hidden', '?'),
  \   <bang>0)
command! -bang -nargs=* RgRaw
  \ call fzf#vim#grep(
  \   'rg --hidden --follow --glob "!{.git,node_modules}/*" --column --line-number --no-heading --color=always --smart-case '.(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:60%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview('right:60%:hidden', '?'), <bang>0)

" floating fzf
if has('nvim') && exists('&winblend') && &termguicolors
  set winblend=20

  let $FZF_DEFAULT_OPTS = '--layout=reverse'

  function! FloatingFZF()
    let width = float2nr(&lines * 0.8)
    let height = float2nr(&columns * 0.1)
    let horizontal = float2nr((&columns - width) / 4)
    let vertical = 1
    let opts = { 'relative': 'editor',
               \ 'row': vertical,
               \ 'col': horizontal,
               \ 'width': width,
               \ 'height': height }

    let win = nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:Normal')
  endfunction

  let g:fzf_layout = { 'window': 'call FloatingFZF()' }
endif

" ==> Gutentags
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root  = ['package.json', '.git', '.hg', '.svn']
let g:gutentags_cache_dir = expand('~/.gutentags_cache')
let g:gutentags_exclude_filetypes = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git']
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_ctags_extra_args = ['--tag-relative=yes', '--fields=+ailmnS']
let g:gutentags_ctags_exclude = [
\  '*.git', '*.svn', '*.hg',
\  'cache', 'build', 'dist', 'bin', 'node_modules', 'bower_components',
\  '*-lock.json',  '*.lock',
\  '*.min.*',
\  '*.bak',
\  '*.zip',
\  '*.pyc',
\  '*.class',
\  '*.sln',
\  '*.csproj', '*.csproj.user',
\  '*.tmp',
\  '*.cache',
\  '*.vscode',
\  '*.pdb',
\  '*.exe', '*.dll', '*.bin',
\  '*.mp3', '*.ogg', '*.flac',
\  '*.swp', '*.swo', 
\  '.DS_Store', '*.plist',
\  '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png', '*.svg',
\  '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
\  '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx', '*.xls',
\]
